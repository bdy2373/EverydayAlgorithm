import java.util.*;

class Node{
	int x;
	int y;
	public Node(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class N14502_Laboratory {
	static int result;

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//결과값 초기화 
		result = Integer.MIN_VALUE;

		//입력받기
		Scanner scanner = new Scanner(System.in);
		int N = scanner.nextInt();
		int M = scanner.nextInt();
		int[][] map = new int[N][M];
		for(int i=0;i<N;i++) {
			for(int j=0;j<M;j++) {
				map[i][j] = scanner.nextInt();
			}
		}
		
		//벽세우기
		int[][] copyMap = map;
		DFS(copyMap, 0);
		
		System.out.println(result);
	}
	//벽 3개 세우기
	public static void DFS(int[][] map, int wall) {
		//깊은 복사 ******* 중요
		int[][] copyMap = new int[map.length][map[0].length];
	    for(int i=0; i<copyMap.length; i++){
	        System.arraycopy(map[i], 0, copyMap[i], 0, map[0].length);
	    }
		if(wall >= 3) {
			//for(int i=0;i<copyMap.length;i++) {
				//System.out.println(Arrays.toString(copyMap[i]));
			//}
			BFS(copyMap);
			return;
		}else {
			for(int i=0;i<copyMap.length;i++) {
				for(int j=0;j<copyMap[0].length;j++) {
					if(copyMap[i][j]==0) {//빈칸이라면
						copyMap[i][j] = 1;//벽세우고
						DFS(copyMap, wall+1);//다음벽 실행
						copyMap[i][j] = 0;//다시돌려놓기
					}
					
				}
			}
		}
	}
	//바이러스 뿌리기
	public static void BFS(int[][] map) {
		int[] dx = {-1, 1, 0, 0};//상하좌우
		int[] dy = {0,0,-1,1};//상하좌우
		Queue<Node> queue = new LinkedList<>();
		//시작점을 삽입 - 바이러스 위치찾기
		int[][] copyMap = map;
		for(int i=0;i<copyMap.length;i++) {
			for(int j=0;j<copyMap[0].length;j++) {
				if(map[i][j]==2) {//2로 시작하는 곳 찾아서 
					Node start = new Node(i,j);
					//System.out.println("Virus :"+i+","+j);
					queue.add(start);
				}
			}
		}
		//System.out.println("Queue size : "+queue.size());
		while(!queue.isEmpty()) {
			Node baseNode = queue.poll();
			for(int i=0;i<4;i++) {
				Node checkNode = new Node(baseNode.x+dx[i],baseNode.y+dy[i]);
				if(checkNode.x>=0 && checkNode.y>=0
						&&checkNode.x<copyMap.length && checkNode.y<copyMap[0].length) {//테두리를 벗어나지 않고 0보다 크다는 조건을 잊지 말자!
					if(copyMap[checkNode.x][checkNode.y]==0) {//지도의 값이 0일 경우
						copyMap[checkNode.x][checkNode.y]=2;//지도 값을 2로 변경함 
						queue.add(checkNode);//큐에 넣기 
					}
				}
				
			}
		}
		SafeZone(copyMap);
	}
	//안전지대 개수 세기
	public static void SafeZone(int[][] map) {
		int safeZoneCount = 0;
		for(int i=0;i<map.length;i++) {
			for(int j=0;j<map[0].length;j++) {
				if(map[i][j]==0) {
					safeZoneCount++;
				}
			}
		}
		result = Math.max(result,safeZoneCount);
	}
	
}
